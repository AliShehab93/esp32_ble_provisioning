//package com.ash93.esp32_ble_provisioning_plugin.ESPProvisioning.espressif;// Generated by the protocol buffer compiler.  DO NOT EDIT!
//// source: wifi_constants.proto
//
////import com.google.protobuf.*;
//
//import com.google.protobuf.ByteString;
//import com.google.protobuf.CodedInputStream;
//import com.google.protobuf.CodedOutputStream;
//import com.google.protobuf.ExtensionRegistryLite;
//import com.google.protobuf.GeneratedMessageLite;
//import com.google.protobuf.Internal;
//import com.google.protobuf.InvalidProtocolBufferException;
//import com.google.protobuf.MessageLiteOrBuilder;
//import com.google.protobuf.Parser;
//
//public final class WifiConstants {
//  private WifiConstants() {}
//  public static void registerAllExtensions(
//      ExtensionRegistryLite registry) {
//  }
//  /**
//   * Protobuf enum {@code WifiStationState}
//   */
//  public enum WifiStationState
//      implements Internal.EnumLite {
//    /**
//     * <code>Connected = 0;</code>
//     */
//    Connected(0),
//    /**
//     * <code>Connecting = 1;</code>
//     */
//    Connecting(1),
//    /**
//     * <code>Disconnected = 2;</code>
//     */
//    Disconnected(2),
//    /**
//     * <code>ConnectionFailed = 3;</code>
//     */
//    ConnectionFailed(3),
//    UNRECOGNIZED(-1),
//    ;
//
//    /**
//     * <code>Connected = 0;</code>
//     */
//    public static final int Connected_VALUE = 0;
//    /**
//     * <code>Connecting = 1;</code>
//     */
//    public static final int Connecting_VALUE = 1;
//    /**
//     * <code>Disconnected = 2;</code>
//     */
//    public static final int Disconnected_VALUE = 2;
//    /**
//     * <code>ConnectionFailed = 3;</code>
//     */
//    public static final int ConnectionFailed_VALUE = 3;
//
//
//    public final int getNumber() {
//      return value;
//    }
//
//    /**
//     * @deprecated Use {@link #forNumber(int)} instead.
//     */
//    @java.lang.Deprecated
//    public static WifiStationState valueOf(int value) {
//      return forNumber(value);
//    }
//
//    public static WifiStationState forNumber(int value) {
//      switch (value) {
//        case 0: return Connected;
//        case 1: return Connecting;
//        case 2: return Disconnected;
//        case 3: return ConnectionFailed;
//        default: return null;
//      }
//    }
//
//    public static Internal.EnumLiteMap<WifiStationState>
//        internalGetValueMap() {
//      return internalValueMap;
//    }
//    private static final Internal.EnumLiteMap<
//        WifiStationState> internalValueMap =
//          new Internal.EnumLiteMap<WifiStationState>() {
//            public WifiStationState findValueByNumber(int number) {
//              return WifiStationState.forNumber(number);
//            }
//          };
//
//    private final int value;
//
//    private WifiStationState(int value) {
//      this.value = value;
//    }
//
//    // @@protoc_insertion_point(enum_scope:WifiStationState)
//  }
//
//  /**
//   * Protobuf enum {@code WifiConnectFailedReason}
//   */
//  public enum WifiConnectFailedReason
//      implements Internal.EnumLite {
//    /**
//     * <code>AuthError = 0;</code>
//     */
//    AuthError(0),
//    /**
//     * <code>NetworkNotFound = 1;</code>
//     */
//    NetworkNotFound(1),
//    UNRECOGNIZED(-1),
//    ;
//
//    /**
//     * <code>AuthError = 0;</code>
//     */
//    public static final int AuthError_VALUE = 0;
//    /**
//     * <code>NetworkNotFound = 1;</code>
//     */
//    public static final int NetworkNotFound_VALUE = 1;
//
//
//    public final int getNumber() {
//      return value;
//    }
//
//    /**
//     * @deprecated Use {@link #forNumber(int)} instead.
//     */
//    @java.lang.Deprecated
//    public static WifiConnectFailedReason valueOf(int value) {
//      return forNumber(value);
//    }
//
//    public static WifiConnectFailedReason forNumber(int value) {
//      switch (value) {
//        case 0: return AuthError;
//        case 1: return NetworkNotFound;
//        default: return null;
//      }
//    }
//
//    public static Internal.EnumLiteMap<WifiConnectFailedReason>
//        internalGetValueMap() {
//      return internalValueMap;
//    }
//    private static final Internal.EnumLiteMap<
//        WifiConnectFailedReason> internalValueMap =
//          new Internal.EnumLiteMap<WifiConnectFailedReason>() {
//            public WifiConnectFailedReason findValueByNumber(int number) {
//              return WifiConnectFailedReason.forNumber(number);
//            }
//          };
//
//    private final int value;
//
//    private WifiConnectFailedReason(int value) {
//      this.value = value;
//    }
//
//    // @@protoc_insertion_point(enum_scope:WifiConnectFailedReason)
//  }
//
//  /**
//   * Protobuf enum {@code WifiAuthMode}
//   */
//  public enum WifiAuthMode
//      implements Internal.EnumLite {
//    /**
//     * <code>Open = 0;</code>
//     */
//    Open(0),
//    /**
//     * <code>WEP = 1;</code>
//     */
//    WEP(1),
//    /**
//     * <code>WPA_PSK = 2;</code>
//     */
//    WPA_PSK(2),
//    /**
//     * <code>WPA2_PSK = 3;</code>
//     */
//    WPA2_PSK(3),
//    /**
//     * <code>WPA_WPA2_PSK = 4;</code>
//     */
//    WPA_WPA2_PSK(4),
//    /**
//     * <code>WPA2_ENTERPRISE = 5;</code>
//     */
//    WPA2_ENTERPRISE(5),
//    UNRECOGNIZED(-1),
//    ;
//
//    /**
//     * <code>Open = 0;</code>
//     */
//    public static final int Open_VALUE = 0;
//    /**
//     * <code>WEP = 1;</code>
//     */
//    public static final int WEP_VALUE = 1;
//    /**
//     * <code>WPA_PSK = 2;</code>
//     */
//    public static final int WPA_PSK_VALUE = 2;
//    /**
//     * <code>WPA2_PSK = 3;</code>
//     */
//    public static final int WPA2_PSK_VALUE = 3;
//    /**
//     * <code>WPA_WPA2_PSK = 4;</code>
//     */
//    public static final int WPA_WPA2_PSK_VALUE = 4;
//    /**
//     * <code>WPA2_ENTERPRISE = 5;</code>
//     */
//    public static final int WPA2_ENTERPRISE_VALUE = 5;
//
//
//    public final int getNumber() {
//      return value;
//    }
//
//    /**
//     * @deprecated Use {@link #forNumber(int)} instead.
//     */
//    @java.lang.Deprecated
//    public static WifiAuthMode valueOf(int value) {
//      return forNumber(value);
//    }
//
//    public static WifiAuthMode forNumber(int value) {
//      switch (value) {
//        case 0: return Open;
//        case 1: return WEP;
//        case 2: return WPA_PSK;
//        case 3: return WPA2_PSK;
//        case 4: return WPA_WPA2_PSK;
//        case 5: return WPA2_ENTERPRISE;
//        default: return null;
//      }
//    }
//
//    public static Internal.EnumLiteMap<WifiAuthMode>
//        internalGetValueMap() {
//      return internalValueMap;
//    }
//    private static final Internal.EnumLiteMap<
//        WifiAuthMode> internalValueMap =
//          new Internal.EnumLiteMap<WifiAuthMode>() {
//            public WifiAuthMode findValueByNumber(int number) {
//              return WifiAuthMode.forNumber(number);
//            }
//          };
//
//    private final int value;
//
//    private WifiAuthMode(int value) {
//      this.value = value;
//    }
//
//    // @@protoc_insertion_point(enum_scope:WifiAuthMode)
//  }
//
//  public interface WifiConnectedStateOrBuilder extends
//      // @@protoc_insertion_point(interface_extends:WifiConnectedState)
//          MessageLiteOrBuilder {
//
//    /**
//     * <code>optional string ip4_addr = 1;</code>
//     */
//    java.lang.String getIp4Addr();
//    /**
//     * <code>optional string ip4_addr = 1;</code>
//     */
//    ByteString
//        getIp4AddrBytes();
//
//    /**
//     * <code>optional .WifiAuthMode auth_mode = 2;</code>
//     */
//    int getAuthModeValue();
//    /**
//     * <code>optional .WifiAuthMode auth_mode = 2;</code>
//     */
//    WifiConstants.WifiAuthMode getAuthMode();
//
//    /**
//     * <code>optional bytes ssid = 3;</code>
//     */
//    ByteString getSsid();
//
//    /**
//     * <code>optional bytes bssid = 4;</code>
//     */
//    ByteString getBssid();
//
//    /**
//     * <code>optional int32 channel = 5;</code>
//     */
//    int getChannel();
//  }
//  /**
//   * Protobuf type {@code WifiConnectedState}
//   */
//  public  static final class WifiConnectedState extends
//          GeneratedMessageLite<
//                    WifiConnectedState, WifiConnectedState.Builder> implements
//      // @@protoc_insertion_point(message_implements:WifiConnectedState)
//      WifiConnectedStateOrBuilder {
//    private WifiConnectedState() {
//      ip4Addr_ = "";
//      ssid_ = ByteString.EMPTY;
//      bssid_ = ByteString.EMPTY;
//    }
//    public static final int IP4_ADDR_FIELD_NUMBER = 1;
//    private java.lang.String ip4Addr_;
//    /**
//     * <code>optional string ip4_addr = 1;</code>
//     */
//    public java.lang.String getIp4Addr() {
//      return ip4Addr_;
//    }
//    /**
//     * <code>optional string ip4_addr = 1;</code>
//     */
//    public ByteString
//        getIp4AddrBytes() {
//      return ByteString.copyFromUtf8(ip4Addr_);
//    }
//    /**
//     * <code>optional string ip4_addr = 1;</code>
//     */
//    private void setIp4Addr(
//        java.lang.String value) {
//      if (value == null) {
//    throw new NullPointerException();
//  }
//
//      ip4Addr_ = value;
//    }
//    /**
//     * <code>optional string ip4_addr = 1;</code>
//     */
//    private void clearIp4Addr() {
//
//      ip4Addr_ = getDefaultInstance().getIp4Addr();
//    }
//    /**
//     * <code>optional string ip4_addr = 1;</code>
//     */
//    private void setIp4AddrBytes(
//        ByteString value) {
//      if (value == null) {
//    throw new NullPointerException();
//  }
//  checkByteStringIsUtf8(value);
//
//      ip4Addr_ = value.toStringUtf8();
//    }
//
//    public static final int AUTH_MODE_FIELD_NUMBER = 2;
//    private int authMode_;
//    /**
//     * <code>optional .WifiAuthMode auth_mode = 2;</code>
//     */
//    public int getAuthModeValue() {
//      return authMode_;
//    }
//    /**
//     * <code>optional .WifiAuthMode auth_mode = 2;</code>
//     */
//    public WifiConstants.WifiAuthMode getAuthMode() {
//      WifiConstants.WifiAuthMode result = WifiConstants.WifiAuthMode.forNumber(authMode_);
//      return result == null ? WifiConstants.WifiAuthMode.UNRECOGNIZED : result;
//    }
//    /**
//     * <code>optional .WifiAuthMode auth_mode = 2;</code>
//     */
//    private void setAuthModeValue(int value) {
//        authMode_ = value;
//    }
//    /**
//     * <code>optional .WifiAuthMode auth_mode = 2;</code>
//     */
//    private void setAuthMode(WifiConstants.WifiAuthMode value) {
//      if (value == null) {
//        throw new NullPointerException();
//      }
//
//      authMode_ = value.getNumber();
//    }
//    /**
//     * <code>optional .WifiAuthMode auth_mode = 2;</code>
//     */
//    private void clearAuthMode() {
//
//      authMode_ = 0;
//    }
//
//    public static final int SSID_FIELD_NUMBER = 3;
//    private ByteString ssid_;
//    /**
//     * <code>optional bytes ssid = 3;</code>
//     */
//    public ByteString getSsid() {
//      return ssid_;
//    }
//    /**
//     * <code>optional bytes ssid = 3;</code>
//     */
//    private void setSsid(ByteString value) {
//      if (value == null) {
//    throw new NullPointerException();
//  }
//
//      ssid_ = value;
//    }
//    /**
//     * <code>optional bytes ssid = 3;</code>
//     */
//    private void clearSsid() {
//
//      ssid_ = getDefaultInstance().getSsid();
//    }
//
//    public static final int BSSID_FIELD_NUMBER = 4;
//    private ByteString bssid_;
//    /**
//     * <code>optional bytes bssid = 4;</code>
//     */
//    public ByteString getBssid() {
//      return bssid_;
//    }
//    /**
//     * <code>optional bytes bssid = 4;</code>
//     */
//    private void setBssid(ByteString value) {
//      if (value == null) {
//    throw new NullPointerException();
//  }
//
//      bssid_ = value;
//    }
//    /**
//     * <code>optional bytes bssid = 4;</code>
//     */
//    private void clearBssid() {
//
//      bssid_ = getDefaultInstance().getBssid();
//    }
//
//    public static final int CHANNEL_FIELD_NUMBER = 5;
//    private int channel_;
//    /**
//     * <code>optional int32 channel = 5;</code>
//     */
//    public int getChannel() {
//      return channel_;
//    }
//    /**
//     * <code>optional int32 channel = 5;</code>
//     */
//    private void setChannel(int value) {
//
//      channel_ = value;
//    }
//    /**
//     * <code>optional int32 channel = 5;</code>
//     */
//    private void clearChannel() {
//
//      channel_ = 0;
//    }
//
//    public void writeTo(CodedOutputStream output)
//                        throws java.io.IOException {
//      if (!ip4Addr_.isEmpty()) {
//        output.writeString(1, getIp4Addr());
//      }
//      if (authMode_ != WifiConstants.WifiAuthMode.Open.getNumber()) {
//        output.writeEnum(2, authMode_);
//      }
//      if (!ssid_.isEmpty()) {
//        output.writeBytes(3, ssid_);
//      }
//      if (!bssid_.isEmpty()) {
//        output.writeBytes(4, bssid_);
//      }
//      if (channel_ != 0) {
//        output.writeInt32(5, channel_);
//      }
//    }
//
//    public int getSerializedSize() {
//      int size = memoizedSerializedSize;
//      if (size != -1) return size;
//
//      size = 0;
//      if (!ip4Addr_.isEmpty()) {
//        size += CodedOutputStream
//          .computeStringSize(1, getIp4Addr());
//      }
//      if (authMode_ != WifiConstants.WifiAuthMode.Open.getNumber()) {
//        size += CodedOutputStream
//          .computeEnumSize(2, authMode_);
//      }
//      if (!ssid_.isEmpty()) {
//        size += CodedOutputStream
//          .computeBytesSize(3, ssid_);
//      }
//      if (!bssid_.isEmpty()) {
//        size += CodedOutputStream
//          .computeBytesSize(4, bssid_);
//      }
//      if (channel_ != 0) {
//        size += CodedOutputStream
//          .computeInt32Size(5, channel_);
//      }
//      memoizedSerializedSize = size;
//      return size;
//    }
//
//    public static WifiConstants.WifiConnectedState parseFrom(
//        ByteString data)
//        throws InvalidProtocolBufferException {
//      return GeneratedMessageLite.parseFrom(
//          DEFAULT_INSTANCE, data);
//    }
//    public static WifiConstants.WifiConnectedState parseFrom(
//        ByteString data,
//        ExtensionRegistryLite extensionRegistry)
//        throws InvalidProtocolBufferException {
//      return GeneratedMessageLite.parseFrom(
//          DEFAULT_INSTANCE, data, extensionRegistry);
//    }
//    public static WifiConstants.WifiConnectedState parseFrom(byte[] data)
//        throws InvalidProtocolBufferException {
//      return GeneratedMessageLite.parseFrom(
//          DEFAULT_INSTANCE, data);
//    }
//    public static WifiConstants.WifiConnectedState parseFrom(
//        byte[] data,
//        ExtensionRegistryLite extensionRegistry)
//        throws InvalidProtocolBufferException {
//      return GeneratedMessageLite.parseFrom(
//          DEFAULT_INSTANCE, data, extensionRegistry);
//    }
//    public static WifiConstants.WifiConnectedState parseFrom(java.io.InputStream input)
//        throws java.io.IOException {
//      return GeneratedMessageLite.parseFrom(
//          DEFAULT_INSTANCE, input);
//    }
//    public static WifiConstants.WifiConnectedState parseFrom(
//        java.io.InputStream input,
//        ExtensionRegistryLite extensionRegistry)
//        throws java.io.IOException {
//      return GeneratedMessageLite.parseFrom(
//          DEFAULT_INSTANCE, input, extensionRegistry);
//    }
//    public static WifiConstants.WifiConnectedState parseDelimitedFrom(java.io.InputStream input)
//        throws java.io.IOException {
//      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
//    }
//    public static WifiConstants.WifiConnectedState parseDelimitedFrom(
//        java.io.InputStream input,
//        ExtensionRegistryLite extensionRegistry)
//        throws java.io.IOException {
//      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
//    }
//    public static WifiConstants.WifiConnectedState parseFrom(
//        CodedInputStream input)
//        throws java.io.IOException {
//      return GeneratedMessageLite.parseFrom(
//          DEFAULT_INSTANCE, input);
//    }
//    public static WifiConstants.WifiConnectedState parseFrom(
//        CodedInputStream input,
//        ExtensionRegistryLite extensionRegistry)
//        throws java.io.IOException {
//      return GeneratedMessageLite.parseFrom(
//          DEFAULT_INSTANCE, input, extensionRegistry);
//    }
//
//    public static Builder newBuilder() {
//      return DEFAULT_INSTANCE.toBuilder();
//    }
//    public static Builder newBuilder(WifiConstants.WifiConnectedState prototype) {
//      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
//    }
//
//    /**
//     * Protobuf type {@code WifiConnectedState}
//     */
//    public static final class Builder extends
//        GeneratedMessageLite.Builder<
//          WifiConstants.WifiConnectedState, Builder> implements
//        // @@protoc_insertion_point(builder_implements:WifiConnectedState)
//        WifiConstants.WifiConnectedStateOrBuilder {
//      // Construct using WifiConstants.WifiConnectedState.newBuilder()
//      private Builder() {
//        super(DEFAULT_INSTANCE);
//      }
//
//
//      /**
//       * <code>optional string ip4_addr = 1;</code>
//       */
//      public java.lang.String getIp4Addr() {
//        return instance.getIp4Addr();
//      }
//      /**
//       * <code>optional string ip4_addr = 1;</code>
//       */
//      public ByteString
//          getIp4AddrBytes() {
//        return instance.getIp4AddrBytes();
//      }
//      /**
//       * <code>optional string ip4_addr = 1;</code>
//       */
//      public Builder setIp4Addr(
//          java.lang.String value) {
//        copyOnWrite();
//        instance.setIp4Addr(value);
//        return this;
//      }
//      /**
//       * <code>optional string ip4_addr = 1;</code>
//       */
//      public Builder clearIp4Addr() {
//        copyOnWrite();
//        instance.clearIp4Addr();
//        return this;
//      }
//      /**
//       * <code>optional string ip4_addr = 1;</code>
//       */
//      public Builder setIp4AddrBytes(
//          ByteString value) {
//        copyOnWrite();
//        instance.setIp4AddrBytes(value);
//        return this;
//      }
//
//      /**
//       * <code>optional .WifiAuthMode auth_mode = 2;</code>
//       */
//      public int getAuthModeValue() {
//        return instance.getAuthModeValue();
//      }
//      /**
//       * <code>optional .WifiAuthMode auth_mode = 2;</code>
//       */
//      public Builder setAuthModeValue(int value) {
//        copyOnWrite();
//        instance.setAuthModeValue(value);
//        return this;
//      }
//      /**
//       * <code>optional .WifiAuthMode auth_mode = 2;</code>
//       */
//      public WifiConstants.WifiAuthMode getAuthMode() {
//        return instance.getAuthMode();
//      }
//      /**
//       * <code>optional .WifiAuthMode auth_mode = 2;</code>
//       */
//      public Builder setAuthMode(WifiConstants.WifiAuthMode value) {
//        copyOnWrite();
//        instance.setAuthMode(value);
//        return this;
//      }
//      /**
//       * <code>optional .WifiAuthMode auth_mode = 2;</code>
//       */
//      public Builder clearAuthMode() {
//        copyOnWrite();
//        instance.clearAuthMode();
//        return this;
//      }
//
//      /**
//       * <code>optional bytes ssid = 3;</code>
//       */
//      public ByteString getSsid() {
//        return instance.getSsid();
//      }
//      /**
//       * <code>optional bytes ssid = 3;</code>
//       */
//      public Builder setSsid(ByteString value) {
//        copyOnWrite();
//        instance.setSsid(value);
//        return this;
//      }
//      /**
//       * <code>optional bytes ssid = 3;</code>
//       */
//      public Builder clearSsid() {
//        copyOnWrite();
//        instance.clearSsid();
//        return this;
//      }
//
//      /**
//       * <code>optional bytes bssid = 4;</code>
//       */
//      public ByteString getBssid() {
//        return instance.getBssid();
//      }
//      /**
//       * <code>optional bytes bssid = 4;</code>
//       */
//      public Builder setBssid(ByteString value) {
//        copyOnWrite();
//        instance.setBssid(value);
//        return this;
//      }
//      /**
//       * <code>optional bytes bssid = 4;</code>
//       */
//      public Builder clearBssid() {
//        copyOnWrite();
//        instance.clearBssid();
//        return this;
//      }
//
//      /**
//       * <code>optional int32 channel = 5;</code>
//       */
//      public int getChannel() {
//        return instance.getChannel();
//      }
//      /**
//       * <code>optional int32 channel = 5;</code>
//       */
//      public Builder setChannel(int value) {
//        copyOnWrite();
//        instance.setChannel(value);
//        return this;
//      }
//      /**
//       * <code>optional int32 channel = 5;</code>
//       */
//      public Builder clearChannel() {
//        copyOnWrite();
//        instance.clearChannel();
//        return this;
//      }
//
//      // @@protoc_insertion_point(builder_scope:WifiConnectedState)
//    }
//    protected final Object dynamicMethod(
//        GeneratedMessageLite.MethodToInvoke method,
//        Object arg0, Object arg1) {
//      switch (method) {
//        case NEW_MUTABLE_INSTANCE: {
//          return new WifiConstants.WifiConnectedState();
//        }
//        case IS_INITIALIZED: {
//          return DEFAULT_INSTANCE;
//        }
//        case MAKE_IMMUTABLE: {
//          return null;
//        }
//        case NEW_BUILDER: {
//          return new Builder();
//        }
//        case VISIT: {
//          Visitor visitor = (Visitor) arg0;
//          WifiConstants.WifiConnectedState other = (WifiConstants.WifiConnectedState) arg1;
//          ip4Addr_ = visitor.visitString(!ip4Addr_.isEmpty(), ip4Addr_,
//              !other.ip4Addr_.isEmpty(), other.ip4Addr_);
//          authMode_ = visitor.visitInt(authMode_ != 0, authMode_,    other.authMode_ != 0, other.authMode_);
//          ssid_ = visitor.visitByteString(ssid_ != ByteString.EMPTY, ssid_,
//              other.ssid_ != ByteString.EMPTY, other.ssid_);
//          bssid_ = visitor.visitByteString(bssid_ != ByteString.EMPTY, bssid_,
//              other.bssid_ != ByteString.EMPTY, other.bssid_);
//          channel_ = visitor.visitInt(channel_ != 0, channel_,
//              other.channel_ != 0, other.channel_);
//          if (visitor == GeneratedMessageLite.MergeFromVisitor
//              .INSTANCE) {
//          }
//          return this;
//        }
//        case MERGE_FROM_STREAM: {
//          CodedInputStream input =
//              (CodedInputStream) arg0;
//          ExtensionRegistryLite extensionRegistry =
//              (ExtensionRegistryLite) arg1;
//          try {
//            boolean done = false;
//            while (!done) {
//              int tag = input.readTag();
//              switch (tag) {
//                case 0:
//                  done = true;
//                  break;
//                default: {
//                  if (!input.skipField(tag)) {
//                    done = true;
//                  }
//                  break;
//                }
//                case 10: {
//                  String s = input.readStringRequireUtf8();
//
//                  ip4Addr_ = s;
//                  break;
//                }
//                case 16: {
//                  int rawValue = input.readEnum();
//
//                  authMode_ = rawValue;
//                  break;
//                }
//                case 26: {
//
//                  ssid_ = input.readBytes();
//                  break;
//                }
//                case 34: {
//
//                  bssid_ = input.readBytes();
//                  break;
//                }
//                case 40: {
//
//                  channel_ = input.readInt32();
//                  break;
//                }
//              }
//            }
//          } catch (InvalidProtocolBufferException e) {
//            throw new RuntimeException(e.setUnfinishedMessage(this));
//          } catch (java.io.IOException e) {
//            throw new RuntimeException(
//                new InvalidProtocolBufferException(
//                    e.getMessage()).setUnfinishedMessage(this));
//          } finally {
//          }
//        }
//        case GET_DEFAULT_INSTANCE: {
//          return DEFAULT_INSTANCE;
//        }
//        case GET_PARSER: {
//          if (PARSER == null) {    synchronized (WifiConstants.WifiConnectedState.class) {
//              if (PARSER == null) {
//                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
//              }
//            }
//          }
//          return PARSER;
//        }
//      }
//      throw new UnsupportedOperationException();
//    }
//
//
//    // @@protoc_insertion_point(class_scope:WifiConnectedState)
//    private static final WifiConstants.WifiConnectedState DEFAULT_INSTANCE;
//    static {
//      DEFAULT_INSTANCE = new WifiConnectedState();
//      DEFAULT_INSTANCE.makeImmutable();
//    }
//
//    public static WifiConstants.WifiConnectedState getDefaultInstance() {
//      return DEFAULT_INSTANCE;
//    }
//
//    private static volatile Parser<WifiConnectedState> PARSER;
//
//    public static Parser<WifiConnectedState> parser() {
//      return DEFAULT_INSTANCE.getParserForType();
//    }
//  }
//
//
//  static {
//  }
//
//  // @@protoc_insertion_point(outer_class_scope)
//}

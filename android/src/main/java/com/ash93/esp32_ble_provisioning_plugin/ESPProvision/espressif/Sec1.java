package com.ash93.esp32_ble_provisioning_plugin.ESPProvision.espressif;// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sec1.proto

//import com.google.protobuf.*;

import com.google.protobuf.ByteString;
import com.google.protobuf.CodedInputStream;
import com.google.protobuf.CodedOutputStream;
import com.google.protobuf.ExtensionRegistryLite;
import com.google.protobuf.GeneratedMessageLite;
import com.google.protobuf.Internal;
import com.google.protobuf.InvalidProtocolBufferException;
import com.google.protobuf.MessageLiteOrBuilder;
import com.google.protobuf.Parser;

public final class Sec1 {
  private Sec1() {}
  public static void registerAllExtensions(
      ExtensionRegistryLite registry) {
  }
  /**
   * Protobuf enum {@code Sec1MsgType}
   */
  public enum Sec1MsgType
      implements Internal.EnumLite {
    /**
     * <code>Session_Command0 = 0;</code>
     */
    Session_Command0(0),
    /**
     * <code>Session_Response0 = 1;</code>
     */
    Session_Response0(1),
    /**
     * <code>Session_Command1 = 2;</code>
     */
    Session_Command1(2),
    /**
     * <code>Session_Response1 = 3;</code>
     */
    Session_Response1(3),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>Session_Command0 = 0;</code>
     */
    public static final int Session_Command0_VALUE = 0;
    /**
     * <code>Session_Response0 = 1;</code>
     */
    public static final int Session_Response0_VALUE = 1;
    /**
     * <code>Session_Command1 = 2;</code>
     */
    public static final int Session_Command1_VALUE = 2;
    /**
     * <code>Session_Response1 = 3;</code>
     */
    public static final int Session_Response1_VALUE = 3;


    public final int getNumber() {
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static Sec1MsgType valueOf(int value) {
      return forNumber(value);
    }

    public static Sec1MsgType forNumber(int value) {
      switch (value) {
        case 0: return Session_Command0;
        case 1: return Session_Response0;
        case 2: return Session_Command1;
        case 3: return Session_Response1;
        default: return null;
      }
    }

    public static Internal.EnumLiteMap<Sec1MsgType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final Internal.EnumLiteMap<
        Sec1MsgType> internalValueMap =
          new Internal.EnumLiteMap<Sec1MsgType>() {
            public Sec1MsgType findValueByNumber(int number) {
              return Sec1MsgType.forNumber(number);
            }
          };

    private final int value;

    private Sec1MsgType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:Sec1MsgType)
  }

  public interface SessionCmd1OrBuilder extends
      // @@protoc_insertion_point(interface_extends:SessionCmd1)
          MessageLiteOrBuilder {

    /**
     * <code>optional bytes client_verify_data = 2;</code>
     */
    ByteString getClientVerifyData();
  }
  /**
   * Protobuf type {@code SessionCmd1}
   */
  public  static final class SessionCmd1 extends
          GeneratedMessageLite<
                    SessionCmd1, SessionCmd1.Builder> implements
      // @@protoc_insertion_point(message_implements:SessionCmd1)
      SessionCmd1OrBuilder {
    private SessionCmd1() {
      clientVerifyData_ = ByteString.EMPTY;
    }
    public static final int CLIENT_VERIFY_DATA_FIELD_NUMBER = 2;
    private ByteString clientVerifyData_;
    /**
     * <code>optional bytes client_verify_data = 2;</code>
     */
    public ByteString getClientVerifyData() {
      return clientVerifyData_;
    }
    /**
     * <code>optional bytes client_verify_data = 2;</code>
     */
    private void setClientVerifyData(ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      clientVerifyData_ = value;
    }
    /**
     * <code>optional bytes client_verify_data = 2;</code>
     */
    private void clearClientVerifyData() {
      
      clientVerifyData_ = getDefaultInstance().getClientVerifyData();
    }

    public void writeTo(CodedOutputStream output)
                        throws java.io.IOException {
      if (!clientVerifyData_.isEmpty()) {
        output.writeBytes(2, clientVerifyData_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (!clientVerifyData_.isEmpty()) {
        size += CodedOutputStream
          .computeBytesSize(2, clientVerifyData_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static Sec1.SessionCmd1 parseFrom(
        ByteString data)
        throws InvalidProtocolBufferException {
      return GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static Sec1.SessionCmd1 parseFrom(
        ByteString data,
        ExtensionRegistryLite extensionRegistry)
        throws InvalidProtocolBufferException {
      return GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static Sec1.SessionCmd1 parseFrom(byte[] data)
        throws InvalidProtocolBufferException {
      return GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static Sec1.SessionCmd1 parseFrom(
        byte[] data,
        ExtensionRegistryLite extensionRegistry)
        throws InvalidProtocolBufferException {
      return GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static Sec1.SessionCmd1 parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static Sec1.SessionCmd1 parseFrom(
        java.io.InputStream input,
        ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static Sec1.SessionCmd1 parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static Sec1.SessionCmd1 parseDelimitedFrom(
        java.io.InputStream input,
        ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static Sec1.SessionCmd1 parseFrom(
        CodedInputStream input)
        throws java.io.IOException {
      return GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static Sec1.SessionCmd1 parseFrom(
        CodedInputStream input,
        ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(Sec1.SessionCmd1 prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code SessionCmd1}
     */
    public static final class Builder extends
        GeneratedMessageLite.Builder<
          Sec1.SessionCmd1, Builder> implements
        // @@protoc_insertion_point(builder_implements:SessionCmd1)
        Sec1.SessionCmd1OrBuilder {
      // Construct using Sec1.SessionCmd1.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>optional bytes client_verify_data = 2;</code>
       */
      public ByteString getClientVerifyData() {
        return instance.getClientVerifyData();
      }
      /**
       * <code>optional bytes client_verify_data = 2;</code>
       */
      public Builder setClientVerifyData(ByteString value) {
        copyOnWrite();
        instance.setClientVerifyData(value);
        return this;
      }
      /**
       * <code>optional bytes client_verify_data = 2;</code>
       */
      public Builder clearClientVerifyData() {
        copyOnWrite();
        instance.clearClientVerifyData();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:SessionCmd1)
    }
    protected final Object dynamicMethod(
        GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new Sec1.SessionCmd1();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          Sec1.SessionCmd1 other = (Sec1.SessionCmd1) arg1;
          clientVerifyData_ = visitor.visitByteString(clientVerifyData_ != ByteString.EMPTY, clientVerifyData_,
              other.clientVerifyData_ != ByteString.EMPTY, other.clientVerifyData_);
          if (visitor == GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          CodedInputStream input =
              (CodedInputStream) arg0;
          ExtensionRegistryLite extensionRegistry =
              (ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 18: {

                  clientVerifyData_ = input.readBytes();
                  break;
                }
              }
            }
          } catch (InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (Sec1.SessionCmd1.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:SessionCmd1)
    private static final Sec1.SessionCmd1 DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new SessionCmd1();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static Sec1.SessionCmd1 getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile Parser<SessionCmd1> PARSER;

    public static Parser<SessionCmd1> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface SessionResp1OrBuilder extends
      // @@protoc_insertion_point(interface_extends:SessionResp1)
      MessageLiteOrBuilder {

    /**
     * <code>optional .Status status = 1;</code>
     */
    int getStatusValue();
    /**
     * <code>optional .Status status = 1;</code>
     */
    Constants.Status getStatus();

    /**
     * <code>optional bytes device_verify_data = 3;</code>
     */
    ByteString getDeviceVerifyData();
  }
  /**
   * Protobuf type {@code SessionResp1}
   */
  public  static final class SessionResp1 extends
      GeneratedMessageLite<
          SessionResp1, SessionResp1.Builder> implements
      // @@protoc_insertion_point(message_implements:SessionResp1)
      SessionResp1OrBuilder {
    private SessionResp1() {
      deviceVerifyData_ = ByteString.EMPTY;
    }
    public static final int STATUS_FIELD_NUMBER = 1;
    private int status_;
    /**
     * <code>optional .Status status = 1;</code>
     */
    public int getStatusValue() {
      return status_;
    }
    /**
     * <code>optional .Status status = 1;</code>
     */
    public Constants.Status getStatus() {
      Constants.Status result = Constants.Status.forNumber(status_);
      return result == null ? Constants.Status.UNRECOGNIZED : result;
    }
    /**
     * <code>optional .Status status = 1;</code>
     */
    private void setStatusValue(int value) {
        status_ = value;
    }
    /**
     * <code>optional .Status status = 1;</code>
     */
    private void setStatus(Constants.Status value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      status_ = value.getNumber();
    }
    /**
     * <code>optional .Status status = 1;</code>
     */
    private void clearStatus() {
      
      status_ = 0;
    }

    public static final int DEVICE_VERIFY_DATA_FIELD_NUMBER = 3;
    private ByteString deviceVerifyData_;
    /**
     * <code>optional bytes device_verify_data = 3;</code>
     */
    public ByteString getDeviceVerifyData() {
      return deviceVerifyData_;
    }
    /**
     * <code>optional bytes device_verify_data = 3;</code>
     */
    private void setDeviceVerifyData(ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      deviceVerifyData_ = value;
    }
    /**
     * <code>optional bytes device_verify_data = 3;</code>
     */
    private void clearDeviceVerifyData() {
      
      deviceVerifyData_ = getDefaultInstance().getDeviceVerifyData();
    }

    public void writeTo(CodedOutputStream output)
                        throws java.io.IOException {
      if (status_ != Constants.Status.Success.getNumber()) {
        output.writeEnum(1, status_);
      }
      if (!deviceVerifyData_.isEmpty()) {
        output.writeBytes(3, deviceVerifyData_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (status_ != Constants.Status.Success.getNumber()) {
        size += CodedOutputStream
          .computeEnumSize(1, status_);
      }
      if (!deviceVerifyData_.isEmpty()) {
        size += CodedOutputStream
          .computeBytesSize(3, deviceVerifyData_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static Sec1.SessionResp1 parseFrom(
        ByteString data)
        throws InvalidProtocolBufferException {
      return GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static Sec1.SessionResp1 parseFrom(
        ByteString data,
        ExtensionRegistryLite extensionRegistry)
        throws InvalidProtocolBufferException {
      return GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static Sec1.SessionResp1 parseFrom(byte[] data)
        throws InvalidProtocolBufferException {
      return GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static Sec1.SessionResp1 parseFrom(
        byte[] data,
        ExtensionRegistryLite extensionRegistry)
        throws InvalidProtocolBufferException {
      return GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static Sec1.SessionResp1 parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static Sec1.SessionResp1 parseFrom(
        java.io.InputStream input,
        ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static Sec1.SessionResp1 parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static Sec1.SessionResp1 parseDelimitedFrom(
        java.io.InputStream input,
        ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static Sec1.SessionResp1 parseFrom(
        CodedInputStream input)
        throws java.io.IOException {
      return GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static Sec1.SessionResp1 parseFrom(
        CodedInputStream input,
        ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(Sec1.SessionResp1 prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code SessionResp1}
     */
    public static final class Builder extends
        GeneratedMessageLite.Builder<
          Sec1.SessionResp1, Builder> implements
        // @@protoc_insertion_point(builder_implements:SessionResp1)
        Sec1.SessionResp1OrBuilder {
      // Construct using Sec1.SessionResp1.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>optional .Status status = 1;</code>
       */
      public int getStatusValue() {
        return instance.getStatusValue();
      }
      /**
       * <code>optional .Status status = 1;</code>
       */
      public Builder setStatusValue(int value) {
        copyOnWrite();
        instance.setStatusValue(value);
        return this;
      }
      /**
       * <code>optional .Status status = 1;</code>
       */
      public Constants.Status getStatus() {
        return instance.getStatus();
      }
      /**
       * <code>optional .Status status = 1;</code>
       */
      public Builder setStatus(Constants.Status value) {
        copyOnWrite();
        instance.setStatus(value);
        return this;
      }
      /**
       * <code>optional .Status status = 1;</code>
       */
      public Builder clearStatus() {
        copyOnWrite();
        instance.clearStatus();
        return this;
      }

      /**
       * <code>optional bytes device_verify_data = 3;</code>
       */
      public ByteString getDeviceVerifyData() {
        return instance.getDeviceVerifyData();
      }
      /**
       * <code>optional bytes device_verify_data = 3;</code>
       */
      public Builder setDeviceVerifyData(ByteString value) {
        copyOnWrite();
        instance.setDeviceVerifyData(value);
        return this;
      }
      /**
       * <code>optional bytes device_verify_data = 3;</code>
       */
      public Builder clearDeviceVerifyData() {
        copyOnWrite();
        instance.clearDeviceVerifyData();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:SessionResp1)
    }
    protected final Object dynamicMethod(
        GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new Sec1.SessionResp1();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          Sec1.SessionResp1 other = (Sec1.SessionResp1) arg1;
          status_ = visitor.visitInt(status_ != 0, status_,    other.status_ != 0, other.status_);
          deviceVerifyData_ = visitor.visitByteString(deviceVerifyData_ != ByteString.EMPTY, deviceVerifyData_,
              other.deviceVerifyData_ != ByteString.EMPTY, other.deviceVerifyData_);
          if (visitor == GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          CodedInputStream input =
              (CodedInputStream) arg0;
          ExtensionRegistryLite extensionRegistry =
              (ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 8: {
                  int rawValue = input.readEnum();

                  status_ = rawValue;
                  break;
                }
                case 26: {

                  deviceVerifyData_ = input.readBytes();
                  break;
                }
              }
            }
          } catch (InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (Sec1.SessionResp1.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:SessionResp1)
    private static final Sec1.SessionResp1 DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new SessionResp1();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static Sec1.SessionResp1 getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile Parser<SessionResp1> PARSER;

    public static Parser<SessionResp1> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface SessionCmd0OrBuilder extends
      // @@protoc_insertion_point(interface_extends:SessionCmd0)
      MessageLiteOrBuilder {

    /**
     * <code>optional bytes client_pubkey = 1;</code>
     */
    ByteString getClientPubkey();
  }
  /**
   * Protobuf type {@code SessionCmd0}
   */
  public  static final class SessionCmd0 extends
      GeneratedMessageLite<
          SessionCmd0, SessionCmd0.Builder> implements
      // @@protoc_insertion_point(message_implements:SessionCmd0)
      SessionCmd0OrBuilder {
    private SessionCmd0() {
      clientPubkey_ = ByteString.EMPTY;
    }
    public static final int CLIENT_PUBKEY_FIELD_NUMBER = 1;
    private ByteString clientPubkey_;
    /**
     * <code>optional bytes client_pubkey = 1;</code>
     */
    public ByteString getClientPubkey() {
      return clientPubkey_;
    }
    /**
     * <code>optional bytes client_pubkey = 1;</code>
     */
    private void setClientPubkey(ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      clientPubkey_ = value;
    }
    /**
     * <code>optional bytes client_pubkey = 1;</code>
     */
    private void clearClientPubkey() {
      
      clientPubkey_ = getDefaultInstance().getClientPubkey();
    }

    public void writeTo(CodedOutputStream output)
                        throws java.io.IOException {
      if (!clientPubkey_.isEmpty()) {
        output.writeBytes(1, clientPubkey_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (!clientPubkey_.isEmpty()) {
        size += CodedOutputStream
          .computeBytesSize(1, clientPubkey_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static Sec1.SessionCmd0 parseFrom(
        ByteString data)
        throws InvalidProtocolBufferException {
      return GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static Sec1.SessionCmd0 parseFrom(
        ByteString data,
        ExtensionRegistryLite extensionRegistry)
        throws InvalidProtocolBufferException {
      return GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static Sec1.SessionCmd0 parseFrom(byte[] data)
        throws InvalidProtocolBufferException {
      return GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static Sec1.SessionCmd0 parseFrom(
        byte[] data,
        ExtensionRegistryLite extensionRegistry)
        throws InvalidProtocolBufferException {
      return GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static Sec1.SessionCmd0 parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static Sec1.SessionCmd0 parseFrom(
        java.io.InputStream input,
        ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static Sec1.SessionCmd0 parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static Sec1.SessionCmd0 parseDelimitedFrom(
        java.io.InputStream input,
        ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static Sec1.SessionCmd0 parseFrom(
        CodedInputStream input)
        throws java.io.IOException {
      return GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static Sec1.SessionCmd0 parseFrom(
        CodedInputStream input,
        ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(Sec1.SessionCmd0 prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code SessionCmd0}
     */
    public static final class Builder extends
        GeneratedMessageLite.Builder<
          Sec1.SessionCmd0, Builder> implements
        // @@protoc_insertion_point(builder_implements:SessionCmd0)
        Sec1.SessionCmd0OrBuilder {
      // Construct using Sec1.SessionCmd0.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>optional bytes client_pubkey = 1;</code>
       */
      public ByteString getClientPubkey() {
        return instance.getClientPubkey();
      }
      /**
       * <code>optional bytes client_pubkey = 1;</code>
       */
      public Builder setClientPubkey(ByteString value) {
        copyOnWrite();
        instance.setClientPubkey(value);
        return this;
      }
      /**
       * <code>optional bytes client_pubkey = 1;</code>
       */
      public Builder clearClientPubkey() {
        copyOnWrite();
        instance.clearClientPubkey();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:SessionCmd0)
    }
    protected final Object dynamicMethod(
        GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new Sec1.SessionCmd0();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          Sec1.SessionCmd0 other = (Sec1.SessionCmd0) arg1;
          clientPubkey_ = visitor.visitByteString(clientPubkey_ != ByteString.EMPTY, clientPubkey_,
              other.clientPubkey_ != ByteString.EMPTY, other.clientPubkey_);
          if (visitor == GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          CodedInputStream input =
              (CodedInputStream) arg0;
          ExtensionRegistryLite extensionRegistry =
              (ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {

                  clientPubkey_ = input.readBytes();
                  break;
                }
              }
            }
          } catch (InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (Sec1.SessionCmd0.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:SessionCmd0)
    private static final Sec1.SessionCmd0 DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new SessionCmd0();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static Sec1.SessionCmd0 getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile Parser<SessionCmd0> PARSER;

    public static Parser<SessionCmd0> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface SessionResp0OrBuilder extends
      // @@protoc_insertion_point(interface_extends:SessionResp0)
      MessageLiteOrBuilder {

    /**
     * <code>optional .Status status = 1;</code>
     */
    int getStatusValue();
    /**
     * <code>optional .Status status = 1;</code>
     */
    Constants.Status getStatus();

    /**
     * <code>optional bytes device_pubkey = 2;</code>
     */
    ByteString getDevicePubkey();

    /**
     * <code>optional bytes device_random = 3;</code>
     */
    ByteString getDeviceRandom();
  }
  /**
   * Protobuf type {@code SessionResp0}
   */
  public  static final class SessionResp0 extends
      GeneratedMessageLite<
          SessionResp0, SessionResp0.Builder> implements
      // @@protoc_insertion_point(message_implements:SessionResp0)
      SessionResp0OrBuilder {
    private SessionResp0() {
      devicePubkey_ = ByteString.EMPTY;
      deviceRandom_ = ByteString.EMPTY;
    }
    public static final int STATUS_FIELD_NUMBER = 1;
    private int status_;
    /**
     * <code>optional .Status status = 1;</code>
     */
    public int getStatusValue() {
      return status_;
    }
    /**
     * <code>optional .Status status = 1;</code>
     */
    public Constants.Status getStatus() {
      Constants.Status result = Constants.Status.forNumber(status_);
      return result == null ? Constants.Status.UNRECOGNIZED : result;
    }
    /**
     * <code>optional .Status status = 1;</code>
     */
    private void setStatusValue(int value) {
        status_ = value;
    }
    /**
     * <code>optional .Status status = 1;</code>
     */
    private void setStatus(Constants.Status value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      status_ = value.getNumber();
    }
    /**
     * <code>optional .Status status = 1;</code>
     */
    private void clearStatus() {
      
      status_ = 0;
    }

    public static final int DEVICE_PUBKEY_FIELD_NUMBER = 2;
    private ByteString devicePubkey_;
    /**
     * <code>optional bytes device_pubkey = 2;</code>
     */
    public ByteString getDevicePubkey() {
      return devicePubkey_;
    }
    /**
     * <code>optional bytes device_pubkey = 2;</code>
     */
    private void setDevicePubkey(ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      devicePubkey_ = value;
    }
    /**
     * <code>optional bytes device_pubkey = 2;</code>
     */
    private void clearDevicePubkey() {
      
      devicePubkey_ = getDefaultInstance().getDevicePubkey();
    }

    public static final int DEVICE_RANDOM_FIELD_NUMBER = 3;
    private ByteString deviceRandom_;
    /**
     * <code>optional bytes device_random = 3;</code>
     */
    public ByteString getDeviceRandom() {
      return deviceRandom_;
    }
    /**
     * <code>optional bytes device_random = 3;</code>
     */
    private void setDeviceRandom(ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      deviceRandom_ = value;
    }
    /**
     * <code>optional bytes device_random = 3;</code>
     */
    private void clearDeviceRandom() {
      
      deviceRandom_ = getDefaultInstance().getDeviceRandom();
    }

    public void writeTo(CodedOutputStream output)
                        throws java.io.IOException {
      if (status_ != Constants.Status.Success.getNumber()) {
        output.writeEnum(1, status_);
      }
      if (!devicePubkey_.isEmpty()) {
        output.writeBytes(2, devicePubkey_);
      }
      if (!deviceRandom_.isEmpty()) {
        output.writeBytes(3, deviceRandom_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (status_ != Constants.Status.Success.getNumber()) {
        size += CodedOutputStream
          .computeEnumSize(1, status_);
      }
      if (!devicePubkey_.isEmpty()) {
        size += CodedOutputStream
          .computeBytesSize(2, devicePubkey_);
      }
      if (!deviceRandom_.isEmpty()) {
        size += CodedOutputStream
          .computeBytesSize(3, deviceRandom_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static Sec1.SessionResp0 parseFrom(
        ByteString data)
        throws InvalidProtocolBufferException {
      return GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static Sec1.SessionResp0 parseFrom(
        ByteString data,
        ExtensionRegistryLite extensionRegistry)
        throws InvalidProtocolBufferException {
      return GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static Sec1.SessionResp0 parseFrom(byte[] data)
        throws InvalidProtocolBufferException {
      return GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static Sec1.SessionResp0 parseFrom(
        byte[] data,
        ExtensionRegistryLite extensionRegistry)
        throws InvalidProtocolBufferException {
      return GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static Sec1.SessionResp0 parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static Sec1.SessionResp0 parseFrom(
        java.io.InputStream input,
        ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static Sec1.SessionResp0 parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static Sec1.SessionResp0 parseDelimitedFrom(
        java.io.InputStream input,
        ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static Sec1.SessionResp0 parseFrom(
        CodedInputStream input)
        throws java.io.IOException {
      return GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static Sec1.SessionResp0 parseFrom(
        CodedInputStream input,
        ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(Sec1.SessionResp0 prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code SessionResp0}
     */
    public static final class Builder extends
        GeneratedMessageLite.Builder<
          Sec1.SessionResp0, Builder> implements
        // @@protoc_insertion_point(builder_implements:SessionResp0)
        Sec1.SessionResp0OrBuilder {
      // Construct using Sec1.SessionResp0.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>optional .Status status = 1;</code>
       */
      public int getStatusValue() {
        return instance.getStatusValue();
      }
      /**
       * <code>optional .Status status = 1;</code>
       */
      public Builder setStatusValue(int value) {
        copyOnWrite();
        instance.setStatusValue(value);
        return this;
      }
      /**
       * <code>optional .Status status = 1;</code>
       */
      public Constants.Status getStatus() {
        return instance.getStatus();
      }
      /**
       * <code>optional .Status status = 1;</code>
       */
      public Builder setStatus(Constants.Status value) {
        copyOnWrite();
        instance.setStatus(value);
        return this;
      }
      /**
       * <code>optional .Status status = 1;</code>
       */
      public Builder clearStatus() {
        copyOnWrite();
        instance.clearStatus();
        return this;
      }

      /**
       * <code>optional bytes device_pubkey = 2;</code>
       */
      public ByteString getDevicePubkey() {
        return instance.getDevicePubkey();
      }
      /**
       * <code>optional bytes device_pubkey = 2;</code>
       */
      public Builder setDevicePubkey(ByteString value) {
        copyOnWrite();
        instance.setDevicePubkey(value);
        return this;
      }
      /**
       * <code>optional bytes device_pubkey = 2;</code>
       */
      public Builder clearDevicePubkey() {
        copyOnWrite();
        instance.clearDevicePubkey();
        return this;
      }

      /**
       * <code>optional bytes device_random = 3;</code>
       */
      public ByteString getDeviceRandom() {
        return instance.getDeviceRandom();
      }
      /**
       * <code>optional bytes device_random = 3;</code>
       */
      public Builder setDeviceRandom(ByteString value) {
        copyOnWrite();
        instance.setDeviceRandom(value);
        return this;
      }
      /**
       * <code>optional bytes device_random = 3;</code>
       */
      public Builder clearDeviceRandom() {
        copyOnWrite();
        instance.clearDeviceRandom();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:SessionResp0)
    }
    protected final Object dynamicMethod(
        GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new Sec1.SessionResp0();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          Sec1.SessionResp0 other = (Sec1.SessionResp0) arg1;
          status_ = visitor.visitInt(status_ != 0, status_,    other.status_ != 0, other.status_);
          devicePubkey_ = visitor.visitByteString(devicePubkey_ != ByteString.EMPTY, devicePubkey_,
              other.devicePubkey_ != ByteString.EMPTY, other.devicePubkey_);
          deviceRandom_ = visitor.visitByteString(deviceRandom_ != ByteString.EMPTY, deviceRandom_,
              other.deviceRandom_ != ByteString.EMPTY, other.deviceRandom_);
          if (visitor == GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          CodedInputStream input =
              (CodedInputStream) arg0;
          ExtensionRegistryLite extensionRegistry =
              (ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 8: {
                  int rawValue = input.readEnum();

                  status_ = rawValue;
                  break;
                }
                case 18: {

                  devicePubkey_ = input.readBytes();
                  break;
                }
                case 26: {

                  deviceRandom_ = input.readBytes();
                  break;
                }
              }
            }
          } catch (InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (Sec1.SessionResp0.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:SessionResp0)
    private static final Sec1.SessionResp0 DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new SessionResp0();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static Sec1.SessionResp0 getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile Parser<SessionResp0> PARSER;

    public static Parser<SessionResp0> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface Sec1PayloadOrBuilder extends
      // @@protoc_insertion_point(interface_extends:Sec1Payload)
      MessageLiteOrBuilder {

    /**
     * <code>optional .Sec1MsgType msg = 1;</code>
     */
    int getMsgValue();
    /**
     * <code>optional .Sec1MsgType msg = 1;</code>
     */
    Sec1.Sec1MsgType getMsg();

    /**
     * <code>optional .SessionCmd0 sc0 = 20;</code>
     */
    Sec1.SessionCmd0 getSc0();

    /**
     * <code>optional .SessionResp0 sr0 = 21;</code>
     */
    Sec1.SessionResp0 getSr0();

    /**
     * <code>optional .SessionCmd1 sc1 = 22;</code>
     */
    Sec1.SessionCmd1 getSc1();

    /**
     * <code>optional .SessionResp1 sr1 = 23;</code>
     */
    Sec1.SessionResp1 getSr1();

    public Sec1.Sec1Payload.PayloadCase getPayloadCase();
  }
  /**
   * Protobuf type {@code Sec1Payload}
   */
  public  static final class Sec1Payload extends
      GeneratedMessageLite<
          Sec1Payload, Sec1Payload.Builder> implements
      // @@protoc_insertion_point(message_implements:Sec1Payload)
      Sec1PayloadOrBuilder {
    private Sec1Payload() {
    }
    private int payloadCase_ = 0;
    private java.lang.Object payload_;
    public enum PayloadCase
        implements Internal.EnumLite {
      SC0(20),
      SR0(21),
      SC1(22),
      SR1(23),
      PAYLOAD_NOT_SET(0);
      private final int value;
      private PayloadCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static PayloadCase valueOf(int value) {
        return forNumber(value);
      }

      public static PayloadCase forNumber(int value) {
        switch (value) {
          case 20: return SC0;
          case 21: return SR0;
          case 22: return SC1;
          case 23: return SR1;
          case 0: return PAYLOAD_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public PayloadCase
    getPayloadCase() {
      return PayloadCase.forNumber(
          payloadCase_);
    }

    private void clearPayload() {
      payloadCase_ = 0;
      payload_ = null;
    }

    public static final int MSG_FIELD_NUMBER = 1;
    private int msg_;
    /**
     * <code>optional .Sec1MsgType msg = 1;</code>
     */
    public int getMsgValue() {
      return msg_;
    }
    /**
     * <code>optional .Sec1MsgType msg = 1;</code>
     */
    public Sec1.Sec1MsgType getMsg() {
      Sec1.Sec1MsgType result = Sec1.Sec1MsgType.forNumber(msg_);
      return result == null ? Sec1.Sec1MsgType.UNRECOGNIZED : result;
    }
    /**
     * <code>optional .Sec1MsgType msg = 1;</code>
     */
    private void setMsgValue(int value) {
        msg_ = value;
    }
    /**
     * <code>optional .Sec1MsgType msg = 1;</code>
     */
    private void setMsg(Sec1.Sec1MsgType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      msg_ = value.getNumber();
    }
    /**
     * <code>optional .Sec1MsgType msg = 1;</code>
     */
    private void clearMsg() {
      
      msg_ = 0;
    }

    public static final int SC0_FIELD_NUMBER = 20;
    /**
     * <code>optional .SessionCmd0 sc0 = 20;</code>
     */
    public Sec1.SessionCmd0 getSc0() {
      if (payloadCase_ == 20) {
         return (Sec1.SessionCmd0) payload_;
      }
      return Sec1.SessionCmd0.getDefaultInstance();
    }
    /**
     * <code>optional .SessionCmd0 sc0 = 20;</code>
     */
    private void setSc0(Sec1.SessionCmd0 value) {
      if (value == null) {
        throw new NullPointerException();
      }
      payload_ = value;
      payloadCase_ = 20;
    }
    /**
     * <code>optional .SessionCmd0 sc0 = 20;</code>
     */
    private void setSc0(
        Sec1.SessionCmd0.Builder builderForValue) {
      payload_ = builderForValue.build();
      payloadCase_ = 20;
    }
    /**
     * <code>optional .SessionCmd0 sc0 = 20;</code>
     */
    private void mergeSc0(Sec1.SessionCmd0 value) {
      if (payloadCase_ == 20 &&
          payload_ != Sec1.SessionCmd0.getDefaultInstance()) {
        payload_ = Sec1.SessionCmd0.newBuilder((Sec1.SessionCmd0) payload_)
            .mergeFrom(value).buildPartial();
      } else {
        payload_ = value;
      }
      payloadCase_ = 20;
    }
    /**
     * <code>optional .SessionCmd0 sc0 = 20;</code>
     */
    private void clearSc0() {
      if (payloadCase_ == 20) {
        payloadCase_ = 0;
        payload_ = null;
      }
    }

    public static final int SR0_FIELD_NUMBER = 21;
    /**
     * <code>optional .SessionResp0 sr0 = 21;</code>
     */
    public Sec1.SessionResp0 getSr0() {
      if (payloadCase_ == 21) {
         return (Sec1.SessionResp0) payload_;
      }
      return Sec1.SessionResp0.getDefaultInstance();
    }
    /**
     * <code>optional .SessionResp0 sr0 = 21;</code>
     */
    private void setSr0(Sec1.SessionResp0 value) {
      if (value == null) {
        throw new NullPointerException();
      }
      payload_ = value;
      payloadCase_ = 21;
    }
    /**
     * <code>optional .SessionResp0 sr0 = 21;</code>
     */
    private void setSr0(
        Sec1.SessionResp0.Builder builderForValue) {
      payload_ = builderForValue.build();
      payloadCase_ = 21;
    }
    /**
     * <code>optional .SessionResp0 sr0 = 21;</code>
     */
    private void mergeSr0(Sec1.SessionResp0 value) {
      if (payloadCase_ == 21 &&
          payload_ != Sec1.SessionResp0.getDefaultInstance()) {
        payload_ = Sec1.SessionResp0.newBuilder((Sec1.SessionResp0) payload_)
            .mergeFrom(value).buildPartial();
      } else {
        payload_ = value;
      }
      payloadCase_ = 21;
    }
    /**
     * <code>optional .SessionResp0 sr0 = 21;</code>
     */
    private void clearSr0() {
      if (payloadCase_ == 21) {
        payloadCase_ = 0;
        payload_ = null;
      }
    }

    public static final int SC1_FIELD_NUMBER = 22;
    /**
     * <code>optional .SessionCmd1 sc1 = 22;</code>
     */
    public Sec1.SessionCmd1 getSc1() {
      if (payloadCase_ == 22) {
         return (Sec1.SessionCmd1) payload_;
      }
      return Sec1.SessionCmd1.getDefaultInstance();
    }
    /**
     * <code>optional .SessionCmd1 sc1 = 22;</code>
     */
    private void setSc1(Sec1.SessionCmd1 value) {
      if (value == null) {
        throw new NullPointerException();
      }
      payload_ = value;
      payloadCase_ = 22;
    }
    /**
     * <code>optional .SessionCmd1 sc1 = 22;</code>
     */
    private void setSc1(
        Sec1.SessionCmd1.Builder builderForValue) {
      payload_ = builderForValue.build();
      payloadCase_ = 22;
    }
    /**
     * <code>optional .SessionCmd1 sc1 = 22;</code>
     */
    private void mergeSc1(Sec1.SessionCmd1 value) {
      if (payloadCase_ == 22 &&
          payload_ != Sec1.SessionCmd1.getDefaultInstance()) {
        payload_ = Sec1.SessionCmd1.newBuilder((Sec1.SessionCmd1) payload_)
            .mergeFrom(value).buildPartial();
      } else {
        payload_ = value;
      }
      payloadCase_ = 22;
    }
    /**
     * <code>optional .SessionCmd1 sc1 = 22;</code>
     */
    private void clearSc1() {
      if (payloadCase_ == 22) {
        payloadCase_ = 0;
        payload_ = null;
      }
    }

    public static final int SR1_FIELD_NUMBER = 23;
    /**
     * <code>optional .SessionResp1 sr1 = 23;</code>
     */
    public Sec1.SessionResp1 getSr1() {
      if (payloadCase_ == 23) {
         return (Sec1.SessionResp1) payload_;
      }
      return Sec1.SessionResp1.getDefaultInstance();
    }
    /**
     * <code>optional .SessionResp1 sr1 = 23;</code>
     */
    private void setSr1(Sec1.SessionResp1 value) {
      if (value == null) {
        throw new NullPointerException();
      }
      payload_ = value;
      payloadCase_ = 23;
    }
    /**
     * <code>optional .SessionResp1 sr1 = 23;</code>
     */
    private void setSr1(
        Sec1.SessionResp1.Builder builderForValue) {
      payload_ = builderForValue.build();
      payloadCase_ = 23;
    }
    /**
     * <code>optional .SessionResp1 sr1 = 23;</code>
     */
    private void mergeSr1(Sec1.SessionResp1 value) {
      if (payloadCase_ == 23 &&
          payload_ != Sec1.SessionResp1.getDefaultInstance()) {
        payload_ = Sec1.SessionResp1.newBuilder((Sec1.SessionResp1) payload_)
            .mergeFrom(value).buildPartial();
      } else {
        payload_ = value;
      }
      payloadCase_ = 23;
    }
    /**
     * <code>optional .SessionResp1 sr1 = 23;</code>
     */
    private void clearSr1() {
      if (payloadCase_ == 23) {
        payloadCase_ = 0;
        payload_ = null;
      }
    }

    public void writeTo(CodedOutputStream output)
                        throws java.io.IOException {
      if (msg_ != Sec1.Sec1MsgType.Session_Command0.getNumber()) {
        output.writeEnum(1, msg_);
      }
      if (payloadCase_ == 20) {
        output.writeMessage(20, (Sec1.SessionCmd0) payload_);
      }
      if (payloadCase_ == 21) {
        output.writeMessage(21, (Sec1.SessionResp0) payload_);
      }
      if (payloadCase_ == 22) {
        output.writeMessage(22, (Sec1.SessionCmd1) payload_);
      }
      if (payloadCase_ == 23) {
        output.writeMessage(23, (Sec1.SessionResp1) payload_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (msg_ != Sec1.Sec1MsgType.Session_Command0.getNumber()) {
        size += CodedOutputStream
          .computeEnumSize(1, msg_);
      }
      if (payloadCase_ == 20) {
        size += CodedOutputStream
          .computeMessageSize(20, (Sec1.SessionCmd0) payload_);
      }
      if (payloadCase_ == 21) {
        size += CodedOutputStream
          .computeMessageSize(21, (Sec1.SessionResp0) payload_);
      }
      if (payloadCase_ == 22) {
        size += CodedOutputStream
          .computeMessageSize(22, (Sec1.SessionCmd1) payload_);
      }
      if (payloadCase_ == 23) {
        size += CodedOutputStream
          .computeMessageSize(23, (Sec1.SessionResp1) payload_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static Sec1.Sec1Payload parseFrom(
        ByteString data)
        throws InvalidProtocolBufferException {
      return GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static Sec1.Sec1Payload parseFrom(
        ByteString data,
        ExtensionRegistryLite extensionRegistry)
        throws InvalidProtocolBufferException {
      return GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static Sec1.Sec1Payload parseFrom(byte[] data)
        throws InvalidProtocolBufferException {
      return GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static Sec1.Sec1Payload parseFrom(
        byte[] data,
        ExtensionRegistryLite extensionRegistry)
        throws InvalidProtocolBufferException {
      return GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static Sec1.Sec1Payload parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static Sec1.Sec1Payload parseFrom(
        java.io.InputStream input,
        ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static Sec1.Sec1Payload parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static Sec1.Sec1Payload parseDelimitedFrom(
        java.io.InputStream input,
        ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static Sec1.Sec1Payload parseFrom(
        CodedInputStream input)
        throws java.io.IOException {
      return GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static Sec1.Sec1Payload parseFrom(
        CodedInputStream input,
        ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(Sec1.Sec1Payload prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code Sec1Payload}
     */
    public static final class Builder extends
        GeneratedMessageLite.Builder<
          Sec1.Sec1Payload, Builder> implements
        // @@protoc_insertion_point(builder_implements:Sec1Payload)
        Sec1.Sec1PayloadOrBuilder {
      // Construct using Sec1.Sec1Payload.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }

      public PayloadCase
          getPayloadCase() {
        return instance.getPayloadCase();
      }

      public Builder clearPayload() {
        copyOnWrite();
        instance.clearPayload();
        return this;
      }


      /**
       * <code>optional .Sec1MsgType msg = 1;</code>
       */
      public int getMsgValue() {
        return instance.getMsgValue();
      }
      /**
       * <code>optional .Sec1MsgType msg = 1;</code>
       */
      public Builder setMsgValue(int value) {
        copyOnWrite();
        instance.setMsgValue(value);
        return this;
      }
      /**
       * <code>optional .Sec1MsgType msg = 1;</code>
       */
      public Sec1.Sec1MsgType getMsg() {
        return instance.getMsg();
      }
      /**
       * <code>optional .Sec1MsgType msg = 1;</code>
       */
      public Builder setMsg(Sec1.Sec1MsgType value) {
        copyOnWrite();
        instance.setMsg(value);
        return this;
      }
      /**
       * <code>optional .Sec1MsgType msg = 1;</code>
       */
      public Builder clearMsg() {
        copyOnWrite();
        instance.clearMsg();
        return this;
      }

      /**
       * <code>optional .SessionCmd0 sc0 = 20;</code>
       */
      public Sec1.SessionCmd0 getSc0() {
        return instance.getSc0();
      }
      /**
       * <code>optional .SessionCmd0 sc0 = 20;</code>
       */
      public Builder setSc0(Sec1.SessionCmd0 value) {
        copyOnWrite();
        instance.setSc0(value);
        return this;
      }
      /**
       * <code>optional .SessionCmd0 sc0 = 20;</code>
       */
      public Builder setSc0(
          Sec1.SessionCmd0.Builder builderForValue) {
        copyOnWrite();
        instance.setSc0(builderForValue);
        return this;
      }
      /**
       * <code>optional .SessionCmd0 sc0 = 20;</code>
       */
      public Builder mergeSc0(Sec1.SessionCmd0 value) {
        copyOnWrite();
        instance.mergeSc0(value);
        return this;
      }
      /**
       * <code>optional .SessionCmd0 sc0 = 20;</code>
       */
      public Builder clearSc0() {
        copyOnWrite();
        instance.clearSc0();
        return this;
      }

      /**
       * <code>optional .SessionResp0 sr0 = 21;</code>
       */
      public Sec1.SessionResp0 getSr0() {
        return instance.getSr0();
      }
      /**
       * <code>optional .SessionResp0 sr0 = 21;</code>
       */
      public Builder setSr0(Sec1.SessionResp0 value) {
        copyOnWrite();
        instance.setSr0(value);
        return this;
      }
      /**
       * <code>optional .SessionResp0 sr0 = 21;</code>
       */
      public Builder setSr0(
          Sec1.SessionResp0.Builder builderForValue) {
        copyOnWrite();
        instance.setSr0(builderForValue);
        return this;
      }
      /**
       * <code>optional .SessionResp0 sr0 = 21;</code>
       */
      public Builder mergeSr0(Sec1.SessionResp0 value) {
        copyOnWrite();
        instance.mergeSr0(value);
        return this;
      }
      /**
       * <code>optional .SessionResp0 sr0 = 21;</code>
       */
      public Builder clearSr0() {
        copyOnWrite();
        instance.clearSr0();
        return this;
      }

      /**
       * <code>optional .SessionCmd1 sc1 = 22;</code>
       */
      public Sec1.SessionCmd1 getSc1() {
        return instance.getSc1();
      }
      /**
       * <code>optional .SessionCmd1 sc1 = 22;</code>
       */
      public Builder setSc1(Sec1.SessionCmd1 value) {
        copyOnWrite();
        instance.setSc1(value);
        return this;
      }
      /**
       * <code>optional .SessionCmd1 sc1 = 22;</code>
       */
      public Builder setSc1(
          Sec1.SessionCmd1.Builder builderForValue) {
        copyOnWrite();
        instance.setSc1(builderForValue);
        return this;
      }
      /**
       * <code>optional .SessionCmd1 sc1 = 22;</code>
       */
      public Builder mergeSc1(Sec1.SessionCmd1 value) {
        copyOnWrite();
        instance.mergeSc1(value);
        return this;
      }
      /**
       * <code>optional .SessionCmd1 sc1 = 22;</code>
       */
      public Builder clearSc1() {
        copyOnWrite();
        instance.clearSc1();
        return this;
      }

      /**
       * <code>optional .SessionResp1 sr1 = 23;</code>
       */
      public Sec1.SessionResp1 getSr1() {
        return instance.getSr1();
      }
      /**
       * <code>optional .SessionResp1 sr1 = 23;</code>
       */
      public Builder setSr1(Sec1.SessionResp1 value) {
        copyOnWrite();
        instance.setSr1(value);
        return this;
      }
      /**
       * <code>optional .SessionResp1 sr1 = 23;</code>
       */
      public Builder setSr1(
          Sec1.SessionResp1.Builder builderForValue) {
        copyOnWrite();
        instance.setSr1(builderForValue);
        return this;
      }
      /**
       * <code>optional .SessionResp1 sr1 = 23;</code>
       */
      public Builder mergeSr1(Sec1.SessionResp1 value) {
        copyOnWrite();
        instance.mergeSr1(value);
        return this;
      }
      /**
       * <code>optional .SessionResp1 sr1 = 23;</code>
       */
      public Builder clearSr1() {
        copyOnWrite();
        instance.clearSr1();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:Sec1Payload)
    }
    protected final Object dynamicMethod(
        GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new Sec1.Sec1Payload();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          Sec1.Sec1Payload other = (Sec1.Sec1Payload) arg1;
          msg_ = visitor.visitInt(msg_ != 0, msg_,    other.msg_ != 0, other.msg_);
          switch (other.getPayloadCase()) {
            case SC0: {
              payload_ = visitor.visitOneofMessage(
                  payloadCase_ == 20,
                  payload_,
                  other.payload_);
              break;
            }
            case SR0: {
              payload_ = visitor.visitOneofMessage(
                  payloadCase_ == 21,
                  payload_,
                  other.payload_);
              break;
            }
            case SC1: {
              payload_ = visitor.visitOneofMessage(
                  payloadCase_ == 22,
                  payload_,
                  other.payload_);
              break;
            }
            case SR1: {
              payload_ = visitor.visitOneofMessage(
                  payloadCase_ == 23,
                  payload_,
                  other.payload_);
              break;
            }
            case PAYLOAD_NOT_SET: {
              visitor.visitOneofNotSet(payloadCase_ != 0);
              break;
            }
          }
          if (visitor == GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            if (other.payloadCase_ != 0) {
              payloadCase_ = other.payloadCase_;
            }
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          CodedInputStream input =
              (CodedInputStream) arg0;
          ExtensionRegistryLite extensionRegistry =
              (ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 8: {
                  int rawValue = input.readEnum();

                  msg_ = rawValue;
                  break;
                }
                case 162: {
                  Sec1.SessionCmd0.Builder subBuilder = null;
                  if (payloadCase_ == 20) {
                    subBuilder = ((Sec1.SessionCmd0) payload_).toBuilder();
                  }
                  payload_ =
                       input.readMessage(Sec1.SessionCmd0.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom((Sec1.SessionCmd0) payload_);
                    payload_ = subBuilder.buildPartial();
                  }
                  payloadCase_ = 20;
                  break;
                }
                case 170: {
                  Sec1.SessionResp0.Builder subBuilder = null;
                  if (payloadCase_ == 21) {
                    subBuilder = ((Sec1.SessionResp0) payload_).toBuilder();
                  }
                  payload_ =
                       input.readMessage(Sec1.SessionResp0.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom((Sec1.SessionResp0) payload_);
                    payload_ = subBuilder.buildPartial();
                  }
                  payloadCase_ = 21;
                  break;
                }
                case 178: {
                  Sec1.SessionCmd1.Builder subBuilder = null;
                  if (payloadCase_ == 22) {
                    subBuilder = ((Sec1.SessionCmd1) payload_).toBuilder();
                  }
                  payload_ =
                       input.readMessage(Sec1.SessionCmd1.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom((Sec1.SessionCmd1) payload_);
                    payload_ = subBuilder.buildPartial();
                  }
                  payloadCase_ = 22;
                  break;
                }
                case 186: {
                  Sec1.SessionResp1.Builder subBuilder = null;
                  if (payloadCase_ == 23) {
                    subBuilder = ((Sec1.SessionResp1) payload_).toBuilder();
                  }
                  payload_ =
                       input.readMessage(Sec1.SessionResp1.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom((Sec1.SessionResp1) payload_);
                    payload_ = subBuilder.buildPartial();
                  }
                  payloadCase_ = 23;
                  break;
                }
              }
            }
          } catch (InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (Sec1.Sec1Payload.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:Sec1Payload)
    private static final Sec1.Sec1Payload DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new Sec1Payload();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static Sec1.Sec1Payload getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile Parser<Sec1Payload> PARSER;

    public static Parser<Sec1Payload> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
